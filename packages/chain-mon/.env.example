###############################################################################
#                               ↓ balance-mon ↓                               #
###############################################################################

# RPC pointing to network to monitor balances on
BALANCE_MON__RPC=

# JSON array in the format [{ "address": <address>, "nickname": <nickname> }, ... ]
BALANCE_MON__ACCOUNTS=


###############################################################################
#                              ↓ multisig-mon ↓                               #
###############################################################################

# RPC pointing to network to monitor safe nonces on
MULTISIG_MON__RPC=

# JSON array in the format [{ "address": <address>, "nickname": <nickname> }, ... ]
MULTISIG_MON__ACCOUNTS=


###############################################################################
#                               ↓ wallet-mon ↓                                #
###############################################################################

# RPC pointing to network to monitor
WALLET_MON__RPC=

# The block number to start monitoring from
# Defaults to the first bedrock block if unset.
WALLET_MON__START_BLOCK_NUMBER=

###############################################################################
#                               ↓ drippie-mon ↓                               #
###############################################################################

# RPC pointing to network where Drippie is deployed
DRIPPIE_MON__RPC=

# Address of the Drippie contract
DRIPPIE_MON__DRIPPIE_ADDRESS=

###############################################################################
#                                  ↓  wd-mon  ↓                               #
###############################################################################

# RPCs pointing to a base chain and Optimism chain
TWO_STEP_MONITOR__L1_RPC_PROVIDER=
TWO_STEP_MONITOR__L2_RPC_PROVIDER=

# The block number to start monitoring from
TWO_STEP_MONITOR__START_BLOCK_NUMBER=

###############################################################################
#                               ↓  fault-mon  ↓                               #
###############################################################################

#  --l1rpcprovider                Provider for interacting with L1 (env: FAULT_DETECTOR__L1_RPC_PROVIDER)
FAULT_DETECTOR__L1_RPC_PROVIDER=
#  --l2rpcprovider                Provider for interacting with L2 (env: FAULT_DETECTOR__L2_RPC_PROVIDER)
FAULT_DETECTOR__L2_RPC_PROVIDER=
#  --bedrock                      Whether or not the service is running against a Bedrock chain (env: FAULT_DETECTOR__BEDROCK)
BEDROCK=true

###############################################################################
#                        ↓ initialized-upgraded-mon ↓                         #
###############################################################################

# RPC pointing to network to monitor
INITIALIZED_UPGRADED_MON__RPC=

# The block number to start monitoring from
# Defaults to the first bedrock block if unset.
INITIALIZED_UPGRADED_MON__START_BLOCK_NUMBER=

# JSON array in the format [{ "label": <string>, "address": <address> }, ... ]
INITIALIZED_UPGRADED_MON__CONTRACTS=

# Optional Params

#  --startbatchindex              Batch index to start checking from. For bedrock chains, this is the L2 height to start from (env: FAULT_DETECTOR__START_BATCH_INDEX)
# FAULT_DETECTOR__START_BATCH_INDEX=
#  --optimismportaladdress        [Custom Bedrock Chains] Deployed OptimismPortal contract address. Used to retrieve necessary info for output verification  (env: FAULT_DETECTOR__OPTIMISM_PORTAL_ADDRESS)
# FAULT_DETECTOR__OPTIMISM_PORTAL_ADDRESS=
#  --statecommitmentchainaddress  [Custom Legacy Chains] Deployed StateCommitmentChain contract address. Used to fetch necessary info for output verification. (env: FAULT_DETECTOR__STATE_COMMITMENT_CHAIN_ADDRESS)
# FAULT_DETECTOR__STATE_COMMITMENT_CHAIN_ADDRESS=
#  --loopintervalms               Loop interval in milliseconds, only applies if service is set to loop (env: FAULT_DETECTOR__LOOP_INTERVAL_MS)
# FAULT_DETECTOR__LOOP_INTERVAL_MS=
#  --port                         Port for the app server (env: FAULT_DETECTOR__PORT)
# FAULT_DETECTOR__PORT=
#  --hostname                     Hostname for the app server (env: FAULT_DETECTOR__HOSTNAME)
# FAULT_DETECTOR__HOSTNAME=
#  --loglevel                     Log level (env: FAULT_DETECTOR__LOG_LEVEL)
# FAULT_DETECTOR__LOG_LEVEL=
