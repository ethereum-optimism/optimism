// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	peer "github.com/libp2p/go-libp2p/core/peer"
	mock "github.com/stretchr/testify/mock"
)

// Scores is an autogenerated mock type for the Scores type
type Scores struct {
	mock.Mock
}

type Scores_Expecter struct {
	mock *mock.Mock
}

func (_m *Scores) EXPECT() *Scores_Expecter {
	return &Scores_Expecter{mock: &_m.Mock}
}

// GetPeerScore provides a mock function with given fields: id
func (_m *Scores) GetPeerScore(id peer.ID) (float64, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPeerScore")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID) (float64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(peer.ID) float64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(peer.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scores_GetPeerScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeerScore'
type Scores_GetPeerScore_Call struct {
	*mock.Call
}

// GetPeerScore is a helper method to define mock.On call
//   - id peer.ID
func (_e *Scores_Expecter) GetPeerScore(id interface{}) *Scores_GetPeerScore_Call {
	return &Scores_GetPeerScore_Call{Call: _e.mock.On("GetPeerScore", id)}
}

func (_c *Scores_GetPeerScore_Call) Run(run func(id peer.ID)) *Scores_GetPeerScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *Scores_GetPeerScore_Call) Return(_a0 float64, _a1 error) *Scores_GetPeerScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scores_GetPeerScore_Call) RunAndReturn(run func(peer.ID) (float64, error)) *Scores_GetPeerScore_Call {
	_c.Call.Return(run)
	return _c
}

// NewScores creates a new instance of Scores. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScores(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scores {
	mock := &Scores{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
