version: 2.1

parameters:
  ci_builder_image:
    type: string
    default: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:v0.49.0
  ci_builder_rust_image:
    type: string
    default: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder-rust:latest
  base_image:
    type: string
    default: default
  # The dispatch parameters are used to manually dispatch pipelines that normally only run post-merge on develop
  # from the CircleCI UI. Example configuration:
  #   when:
  #     or:
  #       - equal: [ "develop", <<pipeline.git.branch>> ]
  #       - equal: [ true, <<pipeline.parameters.main_dispatch>> ]
  # Add a new `*_dispatch` parameter for any pipeline you want manual dispatch for.
  main_dispatch:
    type: boolean
    default: true # default to running main in case the manual run cancelled an automatic run
  fault_proofs_dispatch:
    type: boolean
    default: false
  reproducibility_dispatch:
    type: boolean
    default: false
  kontrol_dispatch:
    type: boolean
    default: false
  sdk_dispatch:
    type: boolean
    default: false

orbs:
  go: circleci/go@1.8.0
  gcp-cli: circleci/gcp-cli@3.0.1
  slack: circleci/slack@4.10.1
  shellcheck: circleci/shellcheck@3.2.0
commands:
  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          name: "Create OIDC credential configuration"
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
      - run:
          name: "Authenticate with GCP using OIDC"
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"

  check-changed:
    description: "Conditionally halts a step if certain modules change"
    parameters:
      patterns:
        type: string
        description: "Comma-separated list of dependencies"
      no_go_deps:
        type: string
        default: ""
        description: "If set, does not trigger on `go.mod` / `go.sum` changes."
    steps:
      - run:
          name: "Check for changes"
          environment:
            CHECK_CHANGED_NO_GO_DEPS: "<<parameters.no_go_deps>>"
          command: |
            cd ops/check-changed
            pip3 install -r requirements.txt
            python3 main.py "<<parameters.patterns>>"

  notify-failures-on-develop:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
      mentions:
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: develop
          mentions: "<< parameters.mentions >>"

jobs:
  cannon-go-lint-and-test:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: medium
    steps:
      - checkout
      - check-changed:
          patterns: cannon,packages/contracts-bedrock/src/cannon,op-preimage,go.mod
      - attach_workspace:
          at: "."
      - run:
          name: prep Cannon results dir
          command: mkdir -p /tmp/test-results
      - run:
          name: build Cannon example binaries
          command: make elf # only compile ELF binaries with Go, we do not have MIPS GCC for creating the debug-dumps.
          working_directory: cannon/example
      - run:
          name: Cannon Go lint
          command: |
            make lint
          working_directory: cannon
      - run:
          name: Cannon Go tests
          command: |
            mkdir -p /testlogs
            gotestsum --format=testname --junitfile=/tmp/test-results/cannon.xml --jsonfile=/testlogs/log.json \
            -- -parallel=2 -coverpkg=github.com/ethereum-optimism/optimism/cannon/... -coverprofile=coverage.out ./...
          working_directory: cannon
      - run:
          name: upload Cannon coverage
          command: codecov --verbose --clean --flags cannon-go-tests
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /testlogs
          when: always
  cannon-build-test-vectors:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: medium
    steps:
      - checkout
      - check-changed:
          patterns: cannon/mipsevm/open_mips_tests/test
      - run:
          name: Build MIPS test vectors
          command: python3 maketests.py && git diff --exit-code
          working_directory: cannon/mipsevm/open_mips_tests

  pnpm-monorepo:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: "Check L1 geth version"
          command: ./ops/scripts/geth-version-checker.sh || (echo "geth version is wrong, update ci-builder"; false)
      - run:
          name: git submodules
          command: make submodules
      - restore_cache:
          name: Restore PNPM Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      # Fetch node_modules into the pnpm store
      # This will cache node_modules based on pnpm-lock so other steps can instantly install them with `pnpm install --prefer-offline`
      # --prefer-offline installs node_modules instantly by just reading from cache if it exists rather than fetching from network
      # when installing node_modules pnpm simply adds symlinks instead of copying the files which is why it is pretty much instant to run --prefer-offline
      # this allows a caching strategy of only checking pnpm-lockfile so we don't have to keep it in sync with our packages
      # For more information see https://pnpm.io/cli/fetch
      - run:
          name: Fetch dependencies
          command: pnpm fetch --frozen-lockfile --prefer-offline
      - save_cache:
          name: Save PNPM Package Cache
          key: pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - "node_modules"
      - run:
          name: Install dependencies
          command: pnpm install:ci:offline
      - run:
          name: print forge version
          command: forge --version
      - run:
          name: Build monorepo
          environment:
            FOUNDRY_PROFILE: ci
          command: pnpm build
      - run:
          name: Generate FPAC allocs
          command: DEVNET_FPAC="true" make devnet-allocs
      - run:
          name: Copy FPAC allocs to .devnet-fpac
          command: cp -r .devnet/ .devnet-fault-proofs/
      - run:
          name: Generate Plasma allocs
          command: DEVNET_PLASMA="true" make devnet-allocs
      - run:
          name: Copy Plasma allocs to .devnet-plasma
          command: cp -r .devnet/ .devnet-plasma/
      - run:
          name: Generate non-FPAC allocs
          command: make devnet-allocs
      - persist_to_workspace:
          root: "."
          paths:
            - "packages/**/dist"
            - "packages/contracts-bedrock/cache"
            - "packages/contracts-bedrock/artifacts"
            - "packages/contracts-bedrock/forge-artifacts"
            - "packages/contracts-bedrock/tsconfig.tsbuildinfo"
            - "packages/contracts-bedrock/tsconfig.build.tsbuildinfo"
            - ".devnet/allocs-l1.json"
            - ".devnet/allocs-l2.json"
            - ".devnet/allocs-l2-delta.json"
            - ".devnet/allocs-l2-ecotone.json"
            - ".devnet/addresses.json"
            - ".devnet-fault-proofs/allocs-l1.json"
            - ".devnet-fault-proofs/addresses.json"
            - ".devnet-fault-proofs/allocs-l2.json"
            - ".devnet-fault-proofs/allocs-l2-delta.json"
            - ".devnet-fault-proofs/allocs-l2-ecotone.json"
            - ".devnet-plasma/allocs-l1.json"
            - ".devnet-plasma/addresses.json"
            - ".devnet-plasma/allocs-l2.json"
            - ".devnet-plasma/allocs-l2-delta.json"
            - ".devnet-plasma/allocs-l2-ecotone.json"
            - "packages/contracts-bedrock/deploy-config/devnetL1.json"
            - "packages/contracts-bedrock/deployments/devnetL1"
      - notify-failures-on-develop

  docker-build:
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      docker_tags:
        description: Docker image tags, comma-separated
        type: string
      docker_name:
        description: "Docker buildx bake target"
        type: string
        default: ""
      registry:
        description: Docker registry
        type: string
        default: "us-docker.pkg.dev"
      repo:
        description: Docker repo
        type: string
        default: "oplabs-tools-artifacts/images"
      save_image_tag:
        description: Save docker image with given tag
        type: string
        default: ""
      platforms:
        description: Platforms to build for, comma-separated
        type: string
        default: "linux/amd64"
      publish:
        description: Publish the docker image (multi-platform, all tags)
        type: boolean
        default: false
      release:
        description: Run the release script
        type: boolean
        default: false
      resource_class:
        description: Docker resoruce class
        type: string
        default: medium
    machine:
      image: <<pipeline.parameters.base_image>>
      resource_class: "<<parameters.resource_class>>"
      docker_layer_caching: true  # we rely on this for faster builds, and actively warm it up for builds with common stages
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/docker_images
      - run:
          command: mkdir -p /tmp/docker_images
      - when:
          condition: "<<parameters.release>>"
          steps:
            - gcp-cli/install
      - when:
          condition:
            or:
              - "<<parameters.publish>>"
              - "<<parameters.release>>"
          steps:
            - gcp-oidc-authenticate
      - run:
          name: Build
          command: |
            # Check to see if DOCKER_HUB_READ_ONLY_TOKEN is set (i.e. we are in repo) before attempting to use secrets.
            # Building should work without this read only login, but may get rate limited.
            if [[ -v DOCKER_HUB_READ_ONLY_TOKEN ]]; then
              echo "$DOCKER_HUB_READ_ONLY_TOKEN" | docker login -u "$DOCKER_HUB_READ_ONLY_USER" --password-stdin
            fi

            export REGISTRY="<<parameters.registry>>"
            export REPOSITORY="<<parameters.repo>>"
            export IMAGE_TAGS="$(echo -ne "<<parameters.docker_tags>>" | sed "s/[^a-zA-Z0-9\n,]/-/g")"
            export GIT_COMMIT="$(git rev-parse HEAD)"
            export GIT_DATE="$(git show -s --format='%ct')"
            export PLATFORMS="<<parameters.platforms>>"

            echo "Checking git tags pointing at $GIT_COMMIT:"
            tags_at_commit=$(git tag --points-at $GIT_COMMIT)
            echo "Tags at commit:\n$tags_at_commit"

            filtered_tags=$(echo "$tags_at_commit" | grep "^<<parameters.docker_name>>/" || true)
            echo "Filtered tags: $filtered_tags"

            if [ -z "$filtered_tags" ]; then
              export GIT_VERSION="untagged"
            else
              sorted_tags=$(echo "$filtered_tags" | sed "s/<<parameters.docker_name>>\///" | sort -V)
              echo "Sorted tags: $sorted_tags"

              # prefer full release tag over "-rc" release candidate tag if both exist
              full_release_tag=$(echo "$sorted_tags" | grep -v -- "-rc" || true)
              if [ -z "$full_release_tag" ]; then
                export GIT_VERSION=$(echo "$sorted_tags" | tail -n 1)
              else
                export GIT_VERSION=$(echo "$full_release_tag" | tail -n 1)
              fi
            fi

            echo "Setting GIT_VERSION=$GIT_VERSION"

            # Create, start (bootstrap) and use a *named* docker builder
            # This allows us to cross-build multi-platform,
            # and naming allows us to use the DLC (docker-layer-cache)
            docker buildx create --driver=docker-container --name=buildx-build --bootstrap --use

            DOCKER_OUTPUT_DESTINATION=""
            if [ "<<parameters.publish>>" == "true" ]; then
              gcloud auth configure-docker <<parameters.registry>>
              echo "Building for platforms $PLATFORMS and then publishing to registry"
              DOCKER_OUTPUT_DESTINATION="--push"
              if [ "<<parameters.save_image_tag>>" != "" ]; then
                echo "ERROR: cannot save image to docker when publishing to registry"
                exit 1
              fi
            else
              if [ "<<parameters.save_image_tag>>" == "" ]; then
                echo "Running $PLATFORMS build without destination (cache warm-up)"
                DOCKER_OUTPUT_DESTINATION=""
              elif [[ $PLATFORMS == *,* ]]; then
                echo "ERROR: cannot perform multi-arch (platforms: $PLATFORMS) build while also loading the result into regular docker"
                exit 1
              else
                echo "Running single-platform $PLATFORMS build and loading into docker"
                DOCKER_OUTPUT_DESTINATION="--load"
              fi
            fi

            # Let them cook!
            docker buildx bake \
              --progress plain \
              --builder=buildx-build \
              -f docker-bake.hcl \
              $DOCKER_OUTPUT_DESTINATION \
              <<parameters.docker_name>>

          no_output_timeout: 45m
      - when:
          condition: "<<parameters.publish>>"
          steps:
            - notify-failures-on-develop
      - when:
          condition: "<<parameters.save_image_tag>>"
          steps:
            - run:
                name: Save
                command: |
                  IMAGE_NAME="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>:<<parameters.save_image_tag>>"
                  docker save -o /tmp/docker_images/<<parameters.docker_name>>.tar $IMAGE_NAME
            - persist_to_workspace:
                root: /tmp/docker_images
                paths:  # only write the one file, to avoid concurrent workspace-file additions
                  - "<<parameters.docker_name>>.tar"
      - when:
          condition: "<<parameters.release>>"
          steps:
            - run:
                name: Tag
                command: |
                  ./ops/scripts/ci-docker-tag-op-stack-release.sh <<parameters.registry>>/<<parameters.repo>> $CIRCLE_TAG $CIRCLE_SHA1
      - when:
          condition:
            and:
              - or:
                - "<<parameters.publish>>"
                - "<<parameters.release>>"
              - equal: [develop, << pipeline.git.branch >>]
          steps:
            - gcp-oidc-authenticate:
                service_account_email: GCP_SERVICE_ATTESTOR_ACCOUNT_EMAIL
            - run:
                name: Sign
                command: |
                  git clone https://github.com/ethereum-optimism/binary_signer
                  cd binary_signer/signer
                  git checkout tags/v1.0.3

                  IMAGE_PATH="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>:<<pipeline.git.revision>>"
                  echo $IMAGE_PATH
                  pip3 install -r requirements.txt

                  python3 ./sign_image.py --command="sign"\
                      --attestor-project-name="$ATTESTOR_PROJECT_NAME"\
                      --attestor-name="$ATTESTOR_NAME"\
                      --image-path="$IMAGE_PATH"\
                      --signer-logging-level="INFO"\
                      --attestor-key-id="//cloudkms.googleapis.com/v1/projects/$ATTESTOR_PROJECT_NAME/locations/global/keyRings/$ATTESTOR_NAME-key-ring/cryptoKeys/$ATTESTOR_NAME-key/cryptoKeyVersions/1"

  # Verify newly published images (built on AMD machine) will run on ARM
  check-cross-platform:
    docker:
      - image: cimg/base:current
    resource_class: arm.medium
    parameters:
      registry:
        description: Docker registry
        type: string
        default: "us-docker.pkg.dev"
      repo:
        description: Docker repo
        type: string
        default: "oplabs-tools-artifacts/images"
      op_component:
        description: "Name of op-stack component (e.g. op-node)"
        type: string
        default: ""
      docker_tag:
        description: "Tag of docker image"
        type: string
        default: "<<pipeline.git.revision>>"
    steps:
      - setup_remote_docker
      - run:
          name: "Verify Image Platform"
          command: |
            image_name="<<parameters.registry>>/<<parameters.repo>>/<<parameters.op_component>>:<<parameters.docker_tag>>"
            echo "Retrieving Docker image manifest: $image_name"
            MANIFEST=$(docker manifest inspect $image_name)

            echo "Verifying 'linux/arm64' is supported..."
            SUPPORTED_PLATFORM=$(echo "$MANIFEST" | jq -r '.manifests[] | select(.platform.architecture == "arm64" and .platform.os == "linux")')
            echo $SUPPORT_PLATFORM
            if [ -z "$SUPPORTED_PLATFORM" ]; then
              echo "Platform 'linux/arm64' not supported by this image"
              exit 1
            fi
      - run:
          name: "Pull and run docker image"
          command: |
            image_name="<<parameters.registry>>/<<parameters.repo>>/<<parameters.op_component>>:<<parameters.docker_tag>>"
            docker pull $image_name || exit 1
            docker run $image_name <<parameters.op_component>> --version || exit 1

  contracts-bedrock-coverage:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: git submodules
          command: make submodules
      - check-changed:
          patterns: contracts-bedrock,op-node
      - run:
          name: print forge version
          command: forge --version
          working_directory: packages/contracts-bedrock
      # We do not use the pre-built contracts becuase forge coverage uses different optimizer settings
      - run:
          name: test and generate coverage
          command: pnpm coverage:lcov
          no_output_timeout: 18m
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: packages/contracts-bedrock
      - run:
          name: upload coverage
          command: codecov --verbose --clean --flags contracts-bedrock-tests
          environment:
            FOUNDRY_PROFILE: ci

  contracts-bedrock-tests:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: git submodules
          command: make submodules
      - restore_cache:
          name: Restore PNPM Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
      - attach_workspace: { at: "." }
      - check-changed:
          patterns: contracts-bedrock,op-node
      # populate node modules from the cache
      - run:
          name: Install dependencies
          command: pnpm install:ci
      - run:
          name: print forge version
          command: forge --version
          working_directory: packages/contracts-bedrock
      - run:
          name: run tests
          command: pnpm test
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: packages/contracts-bedrock
          no_output_timeout: 15m

  contracts-bedrock-checks:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: git submodules
          command: make submodules
      - restore_cache:
          name: Restore PNPM Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
      - attach_workspace: { at: "." }
      - check-changed:
          patterns: contracts-bedrock,op-node
      - setup_remote_docker:
          docker_layer_caching: true
      # populate node modules from the cache
      - run:
          name: Install dependencies
          command: pnpm install:ci
      - run:
          name: forge version
          command: forge --version
      - run:
          # The solc warnings check must be the first step to build the contracts, that way the
          # warnings are output here. On subsequent runs, forge will read artifacts from the cache
          # so warnings would not occur.
          name: solc warnings check
          command: |
            forge build --deny-warnings || echo "export SOLC_WARNINGS_CHECK=1" >> "$BASH_ENV"
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: packages/contracts-bedrock
      - run:
        # Semver lock must come second because one of the later steps may modify the cache & force a contracts rebuild.
          name: semver lock
          command: |
            pnpm semver-lock
            git diff --exit-code semver-lock.json || echo "export SEMVER_LOCK_STATUS=1" >> "$BASH_ENV"
          working_directory: packages/contracts-bedrock
      - run:
          name: check deploy configs
          command: pnpm validate-deploy-configs || echo "export DEPLOY_CONFIGS_STATUS=1" >> "$BASH_ENV"
          working_directory: packages/contracts-bedrock
      - run:
          name: lint
          command: |
            pnpm lint:check || echo "export LINT_STATUS=1" >> "$BASH_ENV"
          working_directory: packages/contracts-bedrock
      - run:
          name: gas snapshot
          command: |
            pnpm gas-snapshot --check || echo "export GAS_SNAPSHOT_STATUS=1" >> "$BASH_ENV"
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: packages/contracts-bedrock
          no_output_timeout: 15m
      - run:
          name: invariant docs
          command: |
            pnpm autogen:invariant-docs
            git diff --exit-code ./invariant-docs/*.md || echo "export INVARIANT_DOCS_STATUS=1" >> "$BASH_ENV"
          working_directory: packages/contracts-bedrock
      - run:
          name: snapshots
          command: |
            pnpm snapshots:check || echo "export SNAPSHOTS_STATUS=1" >> "$BASH_ENV"
          working_directory: packages/contracts-bedrock
      - run:
          name: size check
          command: |
            forge build --sizes --skip "/**/test/**" --skip "/**/scripts/**" || echo "export SIZE_CHECK=1" >> "$BASH_ENV"
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: packages/contracts-bedrock
      - run:
          name: check statuses
          command: |
            if [[ "$LINT_STATUS" -ne 0 ]]; then
              echo "Linting failed, see job output for details."
              FAILED=1
            fi
            if [[ "$SOLC_WARNINGS_CHECK" -ne 0 ]]; then
              echo "Solidity emitted warnings, see job output for details."
              FAILED=1
            fi
            if [[ "$GAS_SNAPSHOT_STATUS" -ne 0 ]]; then
              echo "Gas snapshot failed, see job output for details."
              FAILED=1
            fi
            if [[ "$SEMVER_LOCK_STATUS" -ne 0 ]]; then
              echo "Semver lock failed, see job output for details."
              FAILED=1
            fi
            if [[ "$INVARIANT_DOCS_STATUS" -ne 0 ]]; then
              echo "Invariant docs failed, see job output for details."
              FAILED=1
            fi
            if [[ "$DEPLOY_CONFIGS_STATUS" -ne 0 ]]; then
              echo "Deploy config check failed, see job output for details."
              FAILED=1
            fi
            if [[ "$SNAPSHOTS_STATUS" -ne 0 ]]; then
              echo "Snapshots check failed, see job output for details."
              FAILED=1
            fi
            if [[ "$SIZE_CHECK" -ne 0 ]]; then
              echo "Contract(s) exceed size limit, see job output for details."
              FAILED=1
            fi
            if [[ "$FAILED" -ne 0 ]]; then
              exit 1
            fi

  contracts-bedrock-validate-spaces:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          name: Restore PNPM Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
      - attach_workspace: { at: "." }
      - run:
          name: Install dependencies
          command: pnpm install:ci
      - check-changed:
          patterns: contracts-bedrock
      - run:
          name: validate spacers
          command: pnpm validate-spacers
          working_directory: packages/contracts-bedrock

  js-lint-test:
    parameters:
      package_name:
        description: Package name
        type: string
      dependencies:
        description: Regex matching dependent packages
        type: string
        default: this-package-does-not-exist
      coverage_flag:
        description: Coverage flag name
        type: string
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: large
    steps:
      - checkout
      - attach_workspace: { at: "." }
      - restore_cache:
          name: Restore PNPM Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
      - check-changed:
          patterns: <<parameters.package_name>>,<<parameters.dependencies>>
      # populate node modules from the cache
      - run:
          name: Install dependencies
          command: pnpm install:ci
      - run:
          name: Lint
          command: pnpm lint && git diff --exit-code
          working_directory: packages/<<parameters.package_name>>
      - run:
          name: Test
          command: pnpm test:coverage
          working_directory: packages/<<parameters.package_name>>
      - run:
          name: Upload coverage
          command: codecov --verbose --clean --flags <<parameters.coverage_flag>>

  contracts-ts-tests:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: medium
    steps:
      - checkout
      - attach_workspace: { at: "." }
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm.lock.yaml" }}
      - check-changed:
          patterns: sdk,contracts-bedrock,contracts
      # populate node modules from the cache
      - run:
          name: Install dependencies
          command: pnpm install:ci
      - run:
          name: Check generated and build
          command: pnpm generate:check
          working_directory: packages/contracts-ts

  sdk-next-tests:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: medium
    steps:
      - checkout
      - attach_workspace: { at: "." }
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm.lock.yaml" }}
      - check-changed:
          patterns: sdk
      # populate node modules from the cache
      - run:
          name: Install dependencies
          command: pnpm install:ci
      - run:
          name: sepolia-fork
          background: true
          # atm this is goerli but we should use mainnet after bedrock is live
          command: anvil --fork-url $ANVIL_SEPOLIA_FORK_URL --fork-block-number 5580113 --port 8545

      - run:
          name: op-sepolia-fork
          background: true
          # atm this is goerli but we should use mainnet after bedrock is live
          command: anvil --fork-url $ANVIL_OP_SEPOLIA_FORK_URL --port 9545 --fork-block-number 9925328

      - run:
          name: build
          command: pnpm build
          working_directory: packages/sdk
      - run:
          name: lint
          command: pnpm lint:check
          working_directory: packages/sdk
      - run:
          name: make sure anvil l1 is up
          command: npx wait-on tcp:8545 && cast block-number --rpc-url http://localhost:8545
      - run:
          name: make sure anvil l2 is up
          command: npx wait-on tcp:9545 && cast block-number --rpc-url http://localhost:9545
      - run:
          name: test:next
          command: pnpm test:next:run
          no_output_timeout: 5m
          working_directory: packages/sdk
          environment:
            # anvil[0] test private key
            VITE_E2E_PRIVATE_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
            VITE_E2E_RPC_URL_L1: http://localhost:8545
            VITE_E2E_RPC_URL_L2: http://localhost:9545
      - notify-failures-on-develop

  todo-issues:
    machine:
      image: <<pipeline.parameters.base_image>>
    steps:
      - checkout
      - run:
          name: Install ripgrep
          command: sudo apt-get install -y ripgrep
      - run:
          name: Check TODO issues
          command: ./ops/scripts/todo-checker.sh --verbose
      - notify-failures-on-develop

  fuzz-golang:
    parameters:
      package_name:
        description: Go package name
        type: string
      on_changes:
        description: changed pattern to fire fuzzer on
        type: string
      uses_artifacts:
        description: should load in foundry artifacts
        type: boolean
        default: false
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - check-changed:
          patterns: "<<parameters.package_name>>"
      - attach_workspace:
          at: "."
          if: ${{ uses_artifacts }}
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          name: Restore Go build cache
          key: golang-build-cache
      - run:
          name: Fuzz
          command: make fuzz
          working_directory: "<<parameters.package_name>>"
      - save_cache:
          key: golang-build-cache
          paths:
            - "/root/.cache/go-build"

  depcheck:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - attach_workspace: { at: "." }
      - restore_cache:
          name: Restore PNPM Package Cache
          keys:
            - pnpm-packages-v2-{{ checksum "pnpm-lock.yaml" }}
      - check-changed:
          patterns: packages
      - run:
          name: Check common-ts
          command: npx depcheck
          working_directory: packages/common-ts
      - run:
          name: Check core-utils
          command: npx depcheck
          working_directory: packages/core-utils
      - run:
          name: Check sdk
          command: npx depcheck
          working_directory: packages/sdk

  l1-geth-version-check:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: "Check L1 geth version"
          command: ./ops/scripts/geth-version-checker.sh || (echo "geth version is wrong, update ci-builder"; false)

  go-lint:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          key: golang-build-cache
      - restore_cache:
          key: golang-lint-cache
      - run:
          name: run Go linter
          command: |
            # Identify how many cores it defaults to
            golangci-lint --help | grep concurrency
            make lint-go
          working_directory: .
      - save_cache:
          key: golang-build-cache
          paths:
            - "/root/.cache/go-build"
      - save_cache:
          key: golang-lint-cache
          paths:
            - "/root/.cache/golangci-lint"

  go-test:
    parameters:
      module:
        description: Go Module Name
        type: string
    docker:
      - image: <<pipeline.parameters.ci_builder_image>> # only used to enable codecov.
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          keys:
            - golang-build-cache-<<parameters.module>>
            - golang-build-cache-
      - run:
          name: prep results dir
          command: mkdir -p /tmp/test-results &&  mkdir -p /testlogs
      - run:
          name: run tests
          command: |
            gotestsum --format=testname --junitfile=/tmp/test-results/<<parameters.module>>.xml --jsonfile=/testlogs/log.json \
            -- -parallel=8 -coverpkg=github.com/ethereum-optimism/optimism/... -coverprofile=coverage.out ./...
          working_directory: <<parameters.module>>
      - save_cache:
          key: golang-build-cache-<<parameters.module>>
          paths:
            - "/root/.cache/go-build"
      # TODO(CLI-148): Fix codecov
      #- run:
          #name: upload coverage
          #command: codecov --verbose --clean --flags bedrock-go-tests
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /testlogs
          when: always

  go-e2e-test:
    parameters:
      fpac:
        type: string
        default: ''
      module:
        description: Go Module Name
        type: string
      target:
        description: The make target to execute
        type: string
      parallelism:
        description: Number of parallel test runs
        type: integer
        default: 6
      notify:
        description: Whether to notify on failure
        type: boolean
        default: false
      mentions:
        description: Slack user or group to mention when notifying of failures
        type: string
        default: ""
    environment:
      DEVNET_FPAC: 'false'
      OP_E2E_USE_FPAC: 'false'
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    parallelism: <<parameters.parallelism>>
    steps:
      - checkout
      - when:
          condition:
            equal: ['-fault-proofs', <<parameters.fpac>>]
          steps:
            - run:
                name: Set DEVNET_FPAC = true
                command: echo 'export DEVNET_FPAC=true' >> $BASH_ENV
            - run:
                name: Set OP_E2E_USE_FPAC = true
                command: echo 'export OP_E2E_USE_FPAC=true' >> $BASH_ENV
      - when:
          condition:
            equal: ['-plasma', <<parameters.fpac>>]
          steps:
            - run:
                name: Set OP_E2E_USE_PLASMA = true
                command: echo 'export OP_E2E_USE_PLASMA=true' >> $BASH_ENV
      - check-changed:
          patterns: op-(.+),cannon,contracts-bedrock
      - run:
          name: prep results dir
          command: mkdir -p /tmp/test-results
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          name: Restore Go build cache
          key: golang-build-cache
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load devnet-allocs
          command: |
            mkdir -p .devnet
            cp /tmp/workspace/.devnet<<parameters.fpac>>/allocs-l2.json .devnet/allocs-l2.json
            cp /tmp/workspace/.devnet<<parameters.fpac>>/allocs-l2-delta.json .devnet/allocs-l2-delta.json
            cp /tmp/workspace/.devnet<<parameters.fpac>>/allocs-l2-ecotone.json .devnet/allocs-l2-ecotone.json
            cp /tmp/workspace/.devnet<<parameters.fpac>>/allocs-l1.json .devnet/allocs-l1.json
            cp /tmp/workspace/.devnet<<parameters.fpac>>/addresses.json .devnet/addresses.json
            cp /tmp/workspace/packages/contracts-bedrock/deploy-config/devnetL1.json packages/contracts-bedrock/deploy-config/devnetL1.json
            cp -r /tmp/workspace/packages/contracts-bedrock/deployments/devnetL1 packages/contracts-bedrock/deployments/devnetL1
      - run:
          name: print go's available MIPS targets
          command: go tool dist list | grep mips
      - run:
          name: run tests
          no_output_timeout: 20m
          command: |
            mkdir -p /testlogs

            # The below env var gets overridden when running make test-cannon, but we
            # need to explicitly set it here to prevent Cannon from running when we don't
            # want it to.
            export OP_E2E_CANNON_ENABLED="false"
            # Note: We don't use circle CI test splits because we need to split by test name, not by package. There is an additional
            # constraint that gotestsum does not currently (nor likely will) accept files from different pacakges when building.
            JUNIT_FILE=/tmp/test-results/<<parameters.module>>_<<parameters.target>>.xml JSON_LOG_FILE=/testlogs/test.log make <<parameters.target>>
          working_directory: <<parameters.module>>
      - store_artifacts:
          path: /testlogs
          when: always
      - store_test_results:
          path: /tmp/test-results
      - when:
          condition: "<<parameters.notify>>"
          steps:
            - notify-failures-on-develop:
                mentions: "<<parameters.mentions>>"

  go-lint-test-build:
    parameters:
      binary_name:
        description: Binary name to build
        type: string
      working_directory:
        description: Working directory
        type: string
      build:
        description: Whether or not to build the binary
        type: boolean
        default: true
      dependencies:
        description: Regex matching dependent packages
        type: string
        default: this-package-does-not-exist
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: medium
    steps:
      - checkout
      - check-changed:
          patterns: <<parameters.working_directory>>,<<parameters.dependencies>>
      - run:
          name: Lint
          command: make lint
          working_directory: <<parameters.working_directory>>
      - run:
          name: Test
          command: |
            mkdir -p /test-results
            gotestsum  --format=testname --junitfile /test-results/tests.xml --jsonfile /test-results/log.json -- -parallel=2
          working_directory: <<parameters.working_directory>>
      - store_test_results:
          path: /test-results
      - store_artifacts:
          path: /testlogs
          when: always
      - when:
          condition:
            equal: [ true, <<parameters.build>> ]
          steps:
            - run:
                name: Build
                command: make <<parameters.binary_name>>
                working_directory: <<parameters.working_directory>>

  indexer-tests:
    parameters:
      fpac:
        type: string
        default: ''
    environment:
      DEVNET_FPAC: 'false'
      OP_E2E_USE_FPAC: 'false'
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
      - image: cimg/postgres:14.1
    resource_class: xlarge
    steps:
      - checkout
      - when:
          condition:
            equal: ['fault-proofs', <<parameters.fpac>>]
          steps:
            - run:
                name: Set DEVNET_FPAC = true
                command: echo 'export DEVNET_FPAC=true' >> $BASH_ENV
            - run:
                name: Set OP_E2E_USE_FPAC = true
                command: echo 'export OP_E2E_USE_FPAC=true' >> $BASH_ENV
      - check-changed:
          patterns: indexer
      - run:
          name: Lint
          command: golangci-lint run -E goimports,sqlclosecheck,bodyclose,asciicheck,misspell,errorlint --timeout 4m -e "errors.As" -e "errors.Is" ./...
          working_directory: indexer
      - run:
          name: git submodules
          command: make submodules
      - run:
          name: generate cannon prestate
          command: make cannon-prestate
      - run:
          name: generate L1 state
          command: make devnet-allocs
      - run:
          name: Test
          command: |
            mkdir -p /test-results
            DB_USER=postgres gotestsum --format=standard-verbose --junitfile=/test-results/indexer_tests.xml -- -parallel=4 ./...
          working_directory: indexer
      - store_test_results:
          path: /test-results
      - run:
          name: Build
          command: make indexer
          working_directory: indexer
      - run:
          name: Install node_modules
          command: pnpm install:ci
      - run:
          name: Install tygo
          command: go install github.com/gzuidhof/tygo@latest
          working_directory: indexer/api-ts
      - run:
          name: Check generated code
          command: npm run generate && git diff --exit-code
          working_directory: indexer/api-ts

  cannon-prestate:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          key: golang-build-cache
      - restore_cache:
          key: cannon-prestate-{{ checksum "./cannon/bin/cannon" }}-{{ checksum "op-program/bin/op-program-client.elf" }}
          name: Load cannon prestate cache
      - run:
          name: generate cannon prestate
          command: make cannon-prestate
      - save_cache:
          key: cannon-prestate-{{ checksum "./cannon/bin/cannon" }}-{{ checksum "op-program/bin/op-program-client.elf" }}
          name: Save Cannon prestate to cache
          paths:
            - "op-program/bin/prestate.json"
            - "op-program/bin/meta.json"
            - "op-program/bin/prestate-proof.json"
      - persist_to_workspace:
          root: .
          paths:
            - "op-program/bin/prestate.json"
            - "op-program/bin/meta.json"
            - "op-program/bin/prestate-proof.json"

  preimage-reproducibility:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    parameters:
      version:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Switch to tag
          command: |
            git fetch
            git checkout "op-program/v<<parameters.version>>"
            git submodule update --init --recursive
      - run:
          name: Set expected prestate hashes
          command: |
            if [[ "<<parameters.version>>" == "0.1.0" ]]; then
              echo 'export EXPECTED_PRESTATE_HASH="0x038942ec840131a63c49fa514a3f0577ae401fd5584d56ad50cdf5a8b41d4538"' >> $BASH_ENV
            elif [[ "<<parameters.version>>" == "0.2.0" ]]; then
              echo 'export EXPECTED_PRESTATE_HASH="0x031e3b504740d0b1264e8cf72b6dde0d497184cfb3f98e451c6be8b33bd3f808"' >> $BASH_ENV
            elif [[ "<<parameters.version>>" == "0.3.0" ]]; then
              echo 'export EXPECTED_PRESTATE_HASH="0x034c8cc69f22c35ae386a97136715dd48aaf97fd190942a111bfa680c2f2f421"' >> $BASH_ENV
            elif [[ "<<parameters.version>>" == "1.0.0" ]]; then
              echo 'export EXPECTED_PRESTATE_HASH="0x037ef3c1a487960b0e633d3e513df020c43432769f41a634d18a9595cbf53c55"' >> $BASH_ENV
            else
              echo "Unknown prestate version <<parameters.version>>"
              exit 1
            fi
      - run:
          name: Build prestate
          command: make reproducible-prestate
      - run:
          name: Verify prestate
          command: |
            ACTUAL=$(jq -r .pre ./op-program/bin/prestate-proof.json)
            echo "Expected: ${EXPECTED_PRESTATE_HASH}"
            echo "Actual:   ${ACTUAL}"
            if [[ "${EXPECTED_PRESTATE_HASH}" != "${ACTUAL}" ]]
            then
              echo "Prestate did not match expected"
              exit 1
            fi
      - notify-failures-on-develop:
          mentions: "@proofs-squad"


  devnet-allocs:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          key: golang-build-cache
      - run:
          name: git submodules
          command: make submodules
      - run:
          name: generate devnet allocs
          command: make devnet-allocs
      - persist_to_workspace:
          root: .
          paths:
            - ".devnet/allocs-l2.json"
            - ".devnet/allocs-l2-delta.json"
            - ".devnet/allocs-l2-ecotone.json"
            - ".devnet/allocs-l1.json"
            - ".devnet/addresses.json"
            - "packages/contracts-bedrock/deploy-config/devnetL1.json"
            - "packages/contracts-bedrock/deployments/devnetL1"

  devnet:
    machine:
      image: <<pipeline.parameters.base_image>>
    parameters:
      fpac:
        type: string
    environment:
      DOCKER_BUILDKIT: 1
      DEVNET_NO_BUILD: 'true'
      # Default value; Can be overridden.
      DEVNET_FPAC: 'false'
      DEVNET_PLASMA: 'false'
    steps:
      - checkout
      - when:
          condition:
            equal: ['fault-proofs', <<parameters.fpac>>]
          steps:
            - run:
                name: Set DEVNET_FPAC = true
                command: echo 'export DEVNET_FPAC=true' >> $BASH_ENV
      - when:
          condition:
            equal: ['plasma', <<parameters.fpac>>]
          steps:
            - run:
                name: Set DEVNET_PLASMA = true
                command: echo 'export DEVNET_PLASMA=true' >> $BASH_ENV
      - check-changed:
          patterns: op-(.+),packages,ops-bedrock,bedrock-devnet
      - run:
          name: Install latest golang
          command: |
            wget https://go.dev/dl/go1.21.1.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            go version
      - run:
          name: Install Geth
          command: |
            wget https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-amd64-1.13.14-2bd6bd01.tar.gz
            # geth only provides md5 sums sadly
            echo '76a04354dba9980fcbc35bece2957b30 geth-alltools-linux-amd64-1.13.14-2bd6bd01.tar.gz' | md5sum -c -
            tar -xzvf geth-alltools-linux-amd64-1.13.14-2bd6bd01.tar.gz
            sudo cp geth-alltools-linux-amd64-1.13.14-2bd6bd01/* /usr/local/bin
      - run:
          name: foundryup
          command: |
            curl -L https://foundry.paradigm.xyz | bash
            source $HOME/.bashrc
            foundryup
            echo 'export PATH=$HOME/.foundry/bin:$PATH' >> $BASH_ENV
            source $HOME/.bashrc
            forge --version
      - run:
          name: Install NVM
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            source ~/.bashrc
            nvm --version
      - run:
          name: Install Node
          command: |
            nvm install
            nvm use && node --version && npm --version
      - run:
          name: Install pnpm
          command: |
            npm i pnpm --global
      - run:
          name: git submodules
          command: make submodules
      - attach_workspace:
          at: "."
      - when:
          condition:
            not:
              equal: ['legacy', <<parameters.fpac>>]
          steps:
            - run:
                name: Use non-legacy devnet allocs
                command: rm -r .devnet && mv .devnet-<<parameters.fpac>> .devnet
      - run:
          name: Load and tag docker images
          command: |
            IMAGE_BASE_PREFIX="us-docker.pkg.dev/oplabs-tools-artifacts/images"
            # Load from previous docker-build job
            docker load < "./op-node.tar"
            docker load < "./op-proposer.tar"
            docker load < "./op-batcher.tar"
            docker load < "./op-challenger.tar"
            docker load < "./da-server.tar"
            # rename to the tags that the docker-compose of the devnet expects
            docker tag "$IMAGE_BASE_PREFIX/op-node:<<pipeline.git.revision>>" "$IMAGE_BASE_PREFIX/op-node:devnet"
            docker tag "$IMAGE_BASE_PREFIX/op-proposer:<<pipeline.git.revision>>" "$IMAGE_BASE_PREFIX/op-proposer:devnet"
            docker tag "$IMAGE_BASE_PREFIX/op-batcher:<<pipeline.git.revision>>" "$IMAGE_BASE_PREFIX/op-batcher:devnet"
            docker tag "$IMAGE_BASE_PREFIX/op-challenger:<<pipeline.git.revision>>" "$IMAGE_BASE_PREFIX/op-challenger:devnet"
            docker tag "$IMAGE_BASE_PREFIX/da-server:<<pipeline.git.revision>>" "$IMAGE_BASE_PREFIX/da-server:devnet"
      - run:
          name: pnpm i
          command: |
            pnpm i && pnpm build
      - run:
          name: Bring up the stack
          command: |
            # Specify like this to avoid a forced rebuild of the contracts + devnet L1
            PYTHONPATH=./bedrock-devnet python3 ./bedrock-devnet/main.py --monorepo-dir=.
      - run:
          name: Test the stack
          command: make devnet-test
      - run:
          name: Dump op-node logs
          command: |
            docker logs ops-bedrock-op-node-1 || echo "No logs."
          when: on_fail
      - run:
          name: Dump op-geth logs
          command: |
            docker logs ops-bedrock-l2-1 || echo "No logs."
          when: on_fail
      - run:
          name: Dump l1 logs
          command: |
            docker logs ops-bedrock-l1-1 || echo "No logs."
          when: on_fail
      - run:
          name: Dump op-batcher logs
          command: |
            docker logs ops-bedrock-op-batcher-1 || echo "No logs."
          when: on_fail
      - run:
          name: Dump op-proposer logs
          command: |
            docker logs ops-bedrock-op-proposer-1 || echo "No logs."
          when: on_fail
      - run:
          name: Dump op-challenger logs
          command: |
            docker logs ops-bedrock-op-challenger-1 || echo "No logs."
          when: on_fail
      - run:
          name: Dump da-server logs
          command: |
            docker logs ops-bedrock-da-server-1 || echo "No logs."
          when: on_fail
      - run:
          name: Log deployment artifact
          command: |
            cat broadcast/Deploy.s.sol/900/run-latest.json || echo "No deployment file found"
          when: on_fail
          working_directory: packages/contracts-bedrock
      - run:
          name: Log devnet config
          command: |
            cat deploy-config/devnetL1.json || echo "No devnet config found"
          when: on_fail
          working_directory: packages/contracts-bedrock
      - run:
          name: Log artifacts directory
          command: |
            ls -R forge-artifacts || echo "No forge artifacts found"
          when: on_fail
          working_directory: packages/contracts-bedrock

  semgrep-scan:
    parameters:
      diff_branch:
        type: string
        default: develop
    environment:
      TEMPORARY_BASELINE_REF: << parameters.diff_branch >>
      SEMGREP_REPO_URL: << pipeline.project.git_url >>
      SEMGREP_BRANCH: << pipeline.git.branch >>
      SEMGREP_COMMIT: << pipeline.git.revision >>

      # Change job timeout (default is 1800 seconds; set to 0 to disable)
      SEMGREP_TIMEOUT: 3000

    docker:
      - image: returntocorp/semgrep
    resource_class: medium
    steps:
      - checkout
      - unless:
          condition:
            equal: [ "develop", << pipeline.git.branch >> ]
          steps:
            - run:
                # Scan changed files in PRs, block on new issues only (existing issues ignored)
                # Do a full scan when scanning develop, otherwise do an incremental scan.
                name: "Conditionally set BASELINE env var"
                command: |
                  echo 'export SEMGREP_BASELINE_REF=${TEMPORARY_BASELINE_REF}' >> $BASH_ENV
      - run:
          name: "Set environment variables" # for PR comments and in-app hyperlinks to findings
          command: |
            echo 'export SEMGREP_PR_ID=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
            echo 'export SEMGREP_JOB_URL=$CIRCLE_BUILD_URL' >> $BASH_ENV
            echo 'export SEMGREP_REPO_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
      - run:
          name: "Semgrep scan"
          command: semgrep ci
      - notify-failures-on-develop

  go-mod-download:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    parameters:
      file:
        default: go.sum
        description: The file name of checksum for restore_cache and save_cache.
        type: string
      key:
        default: gomod
        description: The key of restore_cache and save_cache.
        type: string
    steps:
      - checkout
      - restore_cache:
          key: << parameters.key >>-{{ checksum "<< parameters.file >>" }}
          name: Restore Go modules cache
      - run:
          name: Sanity check go mod cache path
          command: test "$(go env GOMODCACHE)" == "/go/pkg/mod" # yes, it's an odd path
      - run:
          command: go mod download
          name: Download Go module dependencies
      - run:
          name: "Go mod tidy"
          command: make mod-tidy && git diff --exit-code
      - run:
          name: run Go linter
          command: |
            # Identify how many cores it defaults to
            golangci-lint --help | grep concurrency
            make lint-go
          working_directory: .
      - save_cache:
          key: << parameters.key >>-{{ checksum "<< parameters.file >>" }}
          name: Save Go modules cache
          paths:
            - "/go/pkg/mod"

  op-service-rethdb-tests:
    docker:
      - image: <<pipeline.parameters.ci_builder_rust_image>>
    steps:
      - checkout
      - check-changed:
          patterns: op-service,op-node
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - run:
          name: Cargo fmt + clippy
          command: |
            cargo +nightly fmt -- --check
            cargo +nightly clippy --all --all-features -- -D warnings
          working_directory: op-service/rethdb-reader
      - run:
          name: Generate testdata db
          command: cargo test
          working_directory: op-service/rethdb-reader
      - run:
          name: Build dylib
          command: cargo build --release
          working_directory: op-service/rethdb-reader
      - run:
          name: Update LD_LIBRARY_PATH
          command: echo 'export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/root/project/op-service/rethdb-reader/target/release"' >> $BASH_ENV
      - run:
          name: Run op-service RethDB tests
          command: |
            gotestsum --format=standard-verbose --junitfile=/tmp/test-results/op-service.xml \
            -- -parallel=8 -coverpkg=github.com/ethereum-optimism/optimism/... -coverprofile=coverage.out \
            -run TestRethDB -tags rethdb -v
          working_directory: op-service/sources
      # TODO(CLI-148): Fix codecov
      #- run:
          #name: upload coverage
          #command: codecov --verbose --clean --flags bedrock-rethdb-go-tests

  bedrock-go-tests:  # just a helper, that depends on all the actual test jobs
    docker:
      # Use a smaller base image to avoid pulling the huge ci-builder
      # image which is not needed for this job and sometimes misses
      # the cache.
      - image: cimg/base:2024.01
    resource_class: medium
    steps:
      - run: echo Done

  fpp-verify:
    docker:
      - image: cimg/go:1.21
    steps:
      - checkout
      - run:
          name: verify-sepolia
          command: |
            make verify-sepolia
          working_directory: op-program
      - notify-failures-on-develop:
          mentions: "@proofs-squad"

  op-program-compat:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "go.sum" }}
      - restore_cache:
          key: golang-build-cache
      - run:
          name: compat-sepolia
          command: |
            make verify-compat
          working_directory: op-program

  check-generated-mocks-op-node:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - check-changed:
          patterns: op-node
      - run:
          name: check-generated-mocks
          command: make generate-mocks-op-node && git diff --exit-code

  check-generated-mocks-op-service:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - check-changed:
          patterns: op-service
      - run:
          name: check-generated-mocks
          command: make generate-mocks-op-service && git diff --exit-code

  check-values-match:
    parameters:
      pattern_file1:
        type: string
        default: ""
      pattern_file2:
        type: string
        default: ""
      file1_path:
        type: string
        default: ""
      file2_path:
        type: string
        default: ""
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: Verify Values Match
          command: |
            ./ops/scripts/ci-match-values-between-files.sh "<< parameters.file1_path >>" "<< parameters.pattern_file1 >>" "<< parameters.file2_path >>" "<< parameters.pattern_file2 >>"

  kontrol-tests:
    docker:
      - image: << pipeline.parameters.ci_builder_image >>
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Checkout Submodule
          command: make submodules
      - check-changed:
          no_go_deps: "true"
          patterns: contracts-bedrock/test/kontrol,contracts-bedrock/src/L1/OptimismPortal\.sol,contracts-bedrock/src/L1/OptimismPortal2\.sol,contracts-bedrock/src/L1/L1CrossDomainMessenger\.sol,contracts-bedrock/src/L1/L1ERC721Bridge\.sol,contracts-bedrock/src/L1/L1StandardBridge\.sol,contracts-bedrock/src/L1/ResourceMetering\.sol,contracts-bedrock/src/universal/StandardBridge\.sol,contracts-bedrock/src/universal/ERC721Bridge\.sol,contracts-bedrock/src/universal/CrossDomainMessenger\.sol
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Kontrol Tests
          command: pnpm test:kontrol
          working_directory: ./packages/contracts-bedrock
      - store_artifacts:
          path: ./packages/contracts-bedrock/test/kontrol/logs/kontrol-results_latest.tar.gz
      - store_test_results:
          path: ./packages/contracts-bedrock
      - notify-failures-on-develop

workflows:
  main:
    when:
      and:
        - or:
            # Trigger on new commits
          - equal: [ webhook, << pipeline.trigger_source >> ]
            # Trigger on manual triggers if explicitly requested
          - equal: [ true, << pipeline.parameters.main_dispatch >> ]
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - pnpm-monorepo:
          name: pnpm-monorepo
      - js-lint-test:
          name: common-ts-tests
          coverage_flag: common-ts-tests
          package_name: common-ts
          requires:
            - pnpm-monorepo
      - js-lint-test:
          name: core-utils-tests
          coverage_flag: core-utils-tests
          package_name: core-utils
          requires:
            - pnpm-monorepo
      - contracts-bedrock-tests:
          requires:
            - pnpm-monorepo
      - contracts-bedrock-coverage
      - contracts-bedrock-checks:
          requires:
            - pnpm-monorepo
      - contracts-bedrock-validate-spaces:
          requires:
            - pnpm-monorepo
      - js-lint-test:
          name: chain-mon-tests
          coverage_flag: chain-mon-tests
          package_name: chain-mon
          dependencies: "(common-ts|contracts-bedrock|core-utils|sdk)"
          requires:
            - pnpm-monorepo
      - js-lint-test:
          name: contracts-ts-tests
          coverage_flag: contracts-ts-tests
          package_name: contracts-ts
          dependencies: '(contracts-bedrock|contracts-ts)'
          requires:
            - pnpm-monorepo
      - js-lint-test:
          name: sdk-tests
          coverage_flag: sdk-tests
          package_name: sdk
          dependencies: "(contracts-bedrock|core-utils)"
          requires:
            - pnpm-monorepo
      - depcheck:
          requires:
            - pnpm-monorepo
      - go-lint-test-build:
          name: proxyd-tests
          binary_name: proxyd
          working_directory: proxyd
      - indexer-tests:
          name: indexer-tests<< matrix.fpac >>
          matrix:
            parameters:
              fpac: ["", "-fault-proofs"]
      - semgrep-scan
      - go-mod-download
      - fuzz-golang:
          name: op-challenger-fuzz
          package_name: op-challenger
          on_changes: op-challenger
          requires: ["go-mod-download"]
      - fuzz-golang:
          name: op-node-fuzz
          package_name: op-node
          on_changes: op-node
          requires: ["go-mod-download"]
      - fuzz-golang:
          name: op-service-fuzz
          package_name: op-service
          on_changes: op-service
          requires: ["go-mod-download"]
      - fuzz-golang:
          name: op-chain-ops-fuzz
          package_name: op-chain-ops
          on_changes: op-chain-ops
          requires: ["go-mod-download"]
      - fuzz-golang:
          name: cannon-fuzz
          package_name: cannon
          on_changes: cannon,packages/contracts-bedrock/src/cannon
          uses_artifacts: true
          requires: ["go-mod-download", "pnpm-monorepo"]
      - fuzz-golang:
          name: op-e2e-fuzz
          package_name: op-e2e
          on_changes: op-e2e,packages/contracts-bedrock/src
          uses_artifacts: true
          requires: ["go-mod-download", "pnpm-monorepo"]
      - go-test:
          name: op-heartbeat-tests
          module: op-heartbeat
          requires: [ "go-mod-download" ]
      - go-test:
          name: op-batcher-tests
          module: op-batcher
          requires: ["go-mod-download"]
      - go-test:
          name: op-chain-ops-tests
          module: op-chain-ops
          requires: ["go-mod-download"]
      - go-test:
          name: op-node-tests
          module: op-node
          requires: ["go-mod-download"]
      - go-test:
          name: op-proposer-tests
          module: op-proposer
          requires: ["go-mod-download"]
      - go-test:
          name: op-challenger-tests
          module: op-challenger
          requires: ["go-mod-download"]
      - go-test:
          name: op-dispute-mon-tests
          module: op-dispute-mon
          requires: ["go-mod-download"]
      - go-test:
          name: op-conductor-tests
          module: op-conductor
          requires: ["go-mod-download"]
      - go-test:
          name: op-program-tests
          module: op-program
          requires: ["go-mod-download"]
      - go-test:
          name: op-service-tests
          module: op-service
          requires: ["go-mod-download"]
      - go-e2e-test:
          name: op-e2e-HTTP-tests<< matrix.fpac >>
          matrix:
            parameters:
              fpac: ["", "-fault-proofs"]
          module: op-e2e
          target: test-http
          parallelism: 4
          requires:
            - go-mod-download
            - pnpm-monorepo
      - go-e2e-test:
          name: op-e2e-action-tests<< matrix.fpac >>
          matrix:
            parameters:
              fpac: ["", "-fault-proofs", "-plasma"]
          module: op-e2e
          target: test-actions
          parallelism: 1
          requires:
            - go-mod-download
            - pnpm-monorepo
      - go-e2e-test:
          name: op-e2e-fault-proof-tests
          module: op-e2e
          target: test-fault-proofs
          parallelism: 4
          requires:
            - pnpm-monorepo
            - cannon-prestate
      - go-e2e-test:
          name: op-e2e-ext-geth-tests<< matrix.fpac >>
          matrix:
            parameters:
              fpac: ["", "-fault-proofs"]
          module: op-e2e
          target: test-external-geth
          requires:
            - go-mod-download
            - pnpm-monorepo
      - op-service-rethdb-tests:
          requires:
            - go-mod-download
      - op-program-compat:
          requires:
            - op-program-tests
      - bedrock-go-tests:
          requires:
            - go-mod-download
            - cannon-build-test-vectors
            - cannon-go-lint-and-test
            - check-generated-mocks-op-node
            - check-generated-mocks-op-service
            - go-mod-download
            - op-batcher-tests
            - op-chain-ops-tests
            - op-heartbeat-tests
            - op-node-tests
            - op-proposer-tests
            - op-challenger-tests
            - op-dispute-mon-tests
            - op-conductor-tests
            - op-program-tests
            - op-program-compat
            - op-service-tests
            - op-service-rethdb-tests
            - op-e2e-HTTP-tests
            - op-e2e-fault-proof-tests
            - op-e2e-action-tests
            - op-e2e-ext-geth-tests
      - docker-build:
          name: op-node-docker-build
          docker_name: op-node
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>> # for devnet later
      - docker-build:
          name: op-batcher-docker-build
          docker_name: op-batcher
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>> # for devnet later
      - docker-build:
          name: op-program-docker-build
          docker_name: op-program
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          # op-program is not part of the devnet, we don't save it.
      - docker-build:
          name: op-proposer-docker-build
          docker_name: op-proposer
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>> # for devnet later
      - docker-build:
          name: op-challenger-docker-build
          docker_name: op-challenger
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>> # for devnet later
      - docker-build:
          name: op-dispute-mon-docker-build
          docker_name: op-dispute-mon
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>> # for devnet later
      - docker-build:
          name: op-conductor-docker-build
          docker_name: op-conductor
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          # op-conductor is not part of the devnet, we don't save it.
      - docker-build:
          name: op-heartbeat-docker-build
          docker_name: op-heartbeat
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          # op-heartbeat is not part of the devnet, we don't save it.
      - docker-build:
          name: da-server-docker-build
          docker_name: da-server
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>> # for devnet later
      - cannon-prestate:
          requires:
            - go-mod-download
      - devnet:
          matrix:
            parameters:
              fpac: ["legacy", "fault-proofs", "plasma"]
          requires:
            - pnpm-monorepo
            - op-batcher-docker-build
            - op-proposer-docker-build
            - op-node-docker-build
            - op-challenger-docker-build
            - da-server-docker-build
            - cannon-prestate
      - docker-build:
          name: indexer-docker-build
          docker_name: indexer
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
      - docker-build:
          name: ufm-metamask-docker-build
          docker_name: ufm-metamask
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
      - check-generated-mocks-op-node
      - check-generated-mocks-op-service
      - cannon-go-lint-and-test:
          requires:
            - pnpm-monorepo
      - cannon-build-test-vectors
      - shellcheck/check:
          name: shell-check
          # We don't need the `exclude` key as the orb detects the `.shellcheckrc`
          dir: .
          ignore-dirs:
            ./packages/contracts-bedrock/lib

  release:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - hold:
          type: approval
          filters:
            tags:
              only: /^(da-server|proxyd|chain-mon|indexer|ci-builder(-rust)?|ufm-[a-z0-9\-]*|op-[a-z0-9\-]*)\/v.*/
            branches:
              ignore: /.*/
      - docker-build:
          name: op-heartbeat-release
          filters:
            tags:
              only: /^op-heartbeat\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-heartbeat
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-heartbeat-cross-platform
          op_component: op-heartbeat
          requires:
            - op-heartbeat-release
      - docker-build:
          name: op-node-docker-release
          filters:
            tags:
              only: /^op-node\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-node
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-node-cross-platform
          op_component: op-node
          requires:
            - op-node-docker-release
      - docker-build:
          name: op-batcher-docker-release
          filters:
            tags:
              only: /^op-batcher\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-batcher
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-batcher-cross-platform
          op_component: op-batcher
          requires:
            - op-batcher-docker-release
      - docker-build:
          name: op-proposer-docker-release
          filters:
            tags:
              only: /^op-proposer\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-proposer
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-proposer-cross-platform
          op_component: op-proposer
          requires:
            - op-proposer-docker-release
      - docker-build:
          name: op-challenger-docker-release
          filters:
            tags:
              only: /^op-challenger\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-challenger
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-challenger-cross-platform
          op_component: op-challenger
          requires:
            - op-challenger-docker-release
      - docker-build:
          name: op-dispute-mon-docker-release
          filters:
            tags:
              only: /^op-dispute-mon\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-dispute-mon
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-dispute-mon-cross-platform
          op_component: op-dispute-mon
          requires:
            - op-dispute-mon-docker-release
      - docker-build:
          name: op-conductor-docker-release
          filters:
            tags:
              only: /^op-conductor\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-conductor
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: op-conductor-cross-platform
          op_component: op-conductor
          requires:
            - op-conductor-docker-release
      - docker-build:
          name: da-server-docker-release
          filters:
            tags:
              only: /^da-server\/v.*/
            branches:
              ignore: /.*/
          docker_name: da-server
          docker_tags: <<pipeline.git.revision>>
          requires: ['hold']
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          context:
            - oplabs-gcr-release
      - check-cross-platform:
          name: da-server-cross-platform
          op_component: da-server
          requires:
            - da-server-docker-release
      - docker-build:
          name: op-ufm-docker-release
          filters:
            tags:
              only: /^op-ufm\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-ufm
          docker_tags: <<pipeline.git.revision>>
          publish: true
          release: true
          context:
            - oplabs-gcr-release
          requires:
            - hold
      - docker-build:
          name: proxyd-docker-release
          filters:
            tags:
              only: /^proxyd\/v.*/
            branches:
              ignore: /.*/
          docker_name: proxyd
          docker_tags: <<pipeline.git.revision>>
          publish: true
          release: true
          context:
            - oplabs-gcr-release
          requires:
            - hold
      - docker-build:
          name: indexer-docker-release
          filters:
            tags:
              only: /^indexer\/v.*/
            branches:
              ignore: /.*/
          docker_name: indexer
          docker_tags: <<pipeline.git.revision>>
          publish: true
          release: true
          context:
            - oplabs-gcr-release
          requires:
            - hold
      - docker-build:
          name: chain-mon-docker-release
          filters:
            tags:
              only: /^chain-mon\/v.*/
            branches:
              ignore: /.*/
          docker_name: chain-mon
          docker_tags: <<pipeline.git.revision>>,latest
          publish: true
          release: true
          resource_class: xlarge
          context:
            - oplabs-gcr-release
          requires:
            - hold
      - docker-build:
          name: ci-builder-docker-release
          filters:
            tags:
              only: /^ci-builder\/v.*/
            branches:
              ignore: /.*/
          docker_name: ci-builder
          docker_tags: <<pipeline.git.revision>>,latest
          publish: true
          release: true
          resource_class: xlarge
          context:
            - oplabs-gcr
          requires:
            - hold
      - docker-build:
          name: ci-builder-rust-docker-release
          filters:
            tags:
              only: /^ci-builder-rust\/v.*/
            branches:
              ignore: /.*/
          docker_name: ci-builder-rust
          docker_tags: <<pipeline.git.revision>>,latest
          publish: true
          release: true
          resource_class: xlarge
          context:
            - oplabs-gcr
          requires:
            - hold
      - docker-build:
          name: ufm-metamask-docker-release
          filters:
            tags:
              only: /^ufm-metamask\/v.*/
            branches:
              ignore: /.*/
          docker_name: ufm-metamask
          docker_tags: <<pipeline.git.revision>>,latest
          publish: true
          release: true
          context:
            - oplabs-gcr
          requires:
            - hold

  scheduled-todo-issues:
    when:
      equal: [ build_four_hours, <<pipeline.schedule.name>> ]
    jobs:
      - todo-issues:
          name: todo-issue-checks
          context:
            - slack

  scheduled-fpp:
    when:
      equal: [ build_four_hours, <<pipeline.schedule.name>> ]
    jobs:
      - fpp-verify:
          context:
            - slack
            - oplabs-fpp-nodes

  develop-fault-proofs:
    when:
      and:
        - or:
          - equal: [ "develop", <<pipeline.git.branch>> ]
          - equal: [ true, <<pipeline.parameters.fault_proofs_dispatch>> ]
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - go-mod-download
      - cannon-prestate:
          requires:
            - go-mod-download
      - pnpm-monorepo:
          name: pnpm-monorepo
          requires:
            - go-mod-download
      - go-e2e-test:
          name: op-e2e-cannon-tests
          module: op-e2e
          target: test-cannon
          parallelism: 4
          notify: true
          mentions: "@proofs-squad"
          requires:
            - pnpm-monorepo
            - cannon-prestate
          context:
            - slack

  develop-kontrol-tests:
    when:
      and:
        - or:
          - equal: [ "develop", <<pipeline.git.branch>> ]
          - equal: [ true, <<pipeline.parameters.kontrol_dispatch>> ]
        - not:
           equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - kontrol-tests:
          context:
            - slack

  develop-sdk-next-tests:
    when:
      and:
        - or:
          - equal: [ "develop", <<pipeline.git.branch>> ]
          - equal: [ true, <<pipeline.parameters.sdk_dispatch>> ]
        - not:
           equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - pnpm-monorepo:
          name: pnpm-monorepo
          context:
            - slack
      - sdk-next-tests:
          name: sdk-next-tests
          requires:
            - pnpm-monorepo
          context:
            - slack

  scheduled-docker-publish:
    when:
      equal: [ build_hourly, <<pipeline.schedule.name>> ]
    jobs:
      - docker-build:
          name: op-node-docker-publish
          docker_name: op-node
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-batcher-docker-publish
          docker_name: op-batcher
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-program-docker-publish
          docker_name: op-program
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-proposer-docker-publish
          docker_name: op-proposer
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-challenger-docker-publish
          docker_name: op-challenger
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-dispute-mon-docker-publish
          docker_name: op-dispute-mon
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-conductor-docker-publish
          docker_name: op-conductor
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: op-heartbeat-docker-publish
          docker_name: op-heartbeat
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: indexer-docker-publish
          docker_name: indexer
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          publish: true
          context:
            - oplabs-gcr
            - slack
          platforms: "linux/amd64,linux/arm64"
      - docker-build:
          name: chain-mon-docker-publish
          docker_name: chain-mon
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          resource_class: xlarge
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: contracts-bedrock-docker-publish
          docker_name: contracts-bedrock
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          resource_class: xlarge
          requires: [ 'chain-mon-docker-publish' ] # use the cached base image
          publish: true
          context:
            - oplabs-gcr
            - slack
      - docker-build:
          name: ufm-metamask-docker-publish
          docker_name: ufm-metamask
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          publish: true
          context:
            - oplabs-gcr
            - slack

  scheduled-preimage-reproducibility:
    when:
      or:
        - equal: [build_daily, <<pipeline.schedule.name>> ]
        # Trigger on manual triggers if explicitly requested
        - equal: [ true, << pipeline.parameters.reproducibility_dispatch >> ]
    jobs:
      - preimage-reproducibility:
          matrix:
            parameters:
              version: ["0.1.0", "0.2.0", "0.3.0", "1.0.0"]
          context:
            slack
